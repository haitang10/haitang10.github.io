<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[evernote]]></title>
    <url>%2F2018%2F09%2F05%2Fevernote%2F</url>
    <content type="text"><![CDATA[请输入密码啦！ Decrypt U2FsdGVkX1+PZ/oPt3dT/9CCs9HDCNahVsTorSWQAUg+mXNc8zveMVLjU0D1xjFMWfdGuGpKHS5bXYfVi6NxhRN7eSjAAsAfUGbm3gcnyeoFawdjjFZAswgm2kYAxYKM0pvs2umt/0cyPQUeDYUBF2a8T2hw3lffbOxKamPFHgF7mSA2FRsDeYGWUDCYWeghmTSIBPesstOcyKhh4cuh8eZq82Hn+ZhGjSnL3HKaBawVT2jeZqOx4BbYwdAOWy/n3TEH4VSb7vDAqPCt1VmXKYrMTkzyNKlWXc6txQ46v0cr5G2b3gPTqE0zC+c9iPLOIOjqtSuwlVuqGbmnp0e5IGQzIZkEAF6iAz8DSzuz7tjfY+gdjQd0ZWfGgBFnWsLHy1l94B0zRSAsZrA0RD+1IsMR2KW+n5jzEDnmDsxyWcndIarK4ZIKXHTChmUD26c3rjEXp38AWG8g6GsIEEvB40E1Bbl6I59FgHDTrCjm+FLLAhrveQEIxuMdQfs0YNCKjnbRbcHmBkR5jMUo+iCZu6zX/eBcR6depyCgfGoIzO3MEKyETBrJxGIvfh596opUnKgOkMcGNiMkFGYAKZ1bBETWq/PsF5q9sstwDHJzMWyJ18fYIlxYFWtZHh1kYOm121SsJkS/mT3SqKBt372NikHuxlzPrIdHoApScwmCC1FHCZc8FVdyoL6xv4EtW8ufeErL96ZUg+3wVALj+PI7CwUW+d0eogztfmUT32C8p7xmu32mx1W0F2NyYk8Rxlbx1YIIUKIfOHPYpTLp9I9NtCnTE9LeK2Td10/M+c9dEFa/T0xBWAy5t7OMnYx79PcYDoK3RkmgZcTEeccfcJBgNGBhcn/DdGTs0HU9Ve3Mm4oR9mbWY3mZ8hJ2FM/oKgfeO95XqLiPX7dFbeuUyu4q0It5eYVXptrDXJH2nxFmgZnYwuZqjeZq3UWvxpFOJnoJ]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DOM操作中的querySelector和getElementsby 的区别]]></title>
    <url>%2F2018%2F09%2F05%2FquerySelector%20%E5%92%8CgetElement%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[首先，什么是DOM？ DOM概述DOMDOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。 浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口。每一个节点都是一个对象，有各自的属性和方法。 DOM 只是一个接口规范，可以用各种语言实现。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。另一方面，JavaScript 也是最常用于 DOM 操作的语言。后面介绍的就是 JavaScript 对 DOM 标准的实现和用法。 节点（node）DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。 节点的类型有七种。 Document：整个文档树的顶层节点 DocumentType：doctype标签（&lt;!D`OCTYPE html&gt;`） Element：网页的各种HTML标签(&lt;body&gt;) Attribute：网页元素的属性（比如class=&quot;right&quot;） Text：标签之间或标签包含的文本 Comment：注释 DocumentFragment：文档的片段 浏览器提供一个原生的节点对象Node，上面这七种节点都继承了Node，因此具有一些共同的属性和方法。 关于node节点的详细内容如下https://wangdoc.com/javascript/dom/general.html 操作节点异同document节点对象代表整个文档，每张网页都有自己的document对象，document对象还有很多自己的属性和方法。这里我们只涉及操作节点的方法。今天讨论的两个方法有各自的优点和缺点，querySelector 方便，因为它是接受选择器作为参数，可以直接定位到要选择的元素，无需多次getElementby而后者性能更好，鱼与熊掌，不可兼得。 document.querySelector()document.querySelector方法接受一个 CSS 选择器作为参数，返回匹配该选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。 var el1 = document.querySelector(&apos;.myclass&apos;); var el2 = document.querySelector(&apos;#myParent &gt; [ng-click]&apos;); document.querySelectorAll方法与querySelector用法类似，区别是返回一个NodeList对象，包含所有匹配给定选择器的节点。这两个方法都支持复杂的 CSS 选择器。 // 选中 data-foo-bar 属性等于 someval 的元素 document.querySelectorAll(&apos;[data-foo-bar=&quot;someval&quot;]&apos;); // 选中 myForm 表单中所有不通过验证的元素 document.querySelectorAll(&apos;#myForm :invalid&apos;); // 选中div元素，那些 class 含 ignore 的除外 document.querySelectorAll(&apos;DIV:not(.ignore)&apos;); // 同时选中 div，a，script 三类元素 document.querySelectorAll(&apos;DIV, A, SCRIPT&apos;); 但是，它们不支持 CSS 伪元素的选择器（比如:first-line和:first-letter）和伪类的选择器（比如:link和:visited），即无法选中伪元素和伪类。 如果querySelectorAll方法的参数是字符串*，则会返回文档中的所有元素节点。另外，querySelectorAll的返回结果不是动态集合，不会实时反映元素节点的变化。 最后，这两个方法除了定义在document对象上，还定义在元素节点上，即在元素节点上也可以调用。 document.getElementsBy这个方法有 document.getElementsByTagName() document.getElementsByClassName() document.getElementsByName() document.getElementById() （只能用在document上，不能element） 不同点 querySelectorAll 返回的是一个 静态节点集合Static Node List，而 getElementsBy 系列的返回的是一个动态的集合 Live Node List。两种方法的区别就在于这个集合会不会自动更新。 x = document.querySelectorAll(&apos;img&apos;) y = document.getElementsByTagName(&apos;img&apos;) document.body.appendChild(new Image()) x.length // 0 y.length // 1 实际上getElementsBy 返回的是HTMLcollection 对象。二者区别在于NodeList 对象会包含文档中的所有节点，如 Element、Text 和 Comment 等。HTMLCollection 对象只会包含文档中的 Element 节点。 var ul = document.getElementsByTagName(&apos;ul&apos;)[0], lis1 = ul.childNodes, lis2 = ul.children; console.log(lis1.toString(), lis1.length); // &quot;[object NodeList]&quot; 11 console.log(lis2.toString(), lis2.length); // &quot;[object HTMLCollection]&quot; 4 getElementBy系列的执行速度基本都是querySelectorAll的100+倍 elem.children和elem.childNodes的区别？elem.children属于html集合接口，将返回一个当前节点的所有子元素的动态的伪数组（元素节点）elem.childNodes属于NodeList接口，将分返回一个当前节点的所有子节点的伪数组（所有子节点） 参考资料： https://www.zhihu.com/question/24702250 https://wangdoc.com/javascript/dom/general.html]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客个性化设置]]></title>
    <url>%2F2018%2F08%2F25%2Fnext%20%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[next 主题 个性化设置参考资料 next 常见问题 http://theme-next.iissnan.com/faqs.html nMask 的博客 https://thief.one/2017/03/03/Hexo搭建博客教程/ 为NexT主题添加文章阅读量统计功能 https://notes.wanghao.work 33种个性化设置，打造炫酷网站 http://shenzekun.cn/hexo主题个性化配置教程.html 首先是主题的一些简单设定，主要是更改站点配置文件和主题配置文件，包括： 选择主题和语言 菜单项和图标 头像，选择图片路径 站点描述 添加标签和分类页面 设置字体（没有设置） 侧边栏social连接（此处有bug） 打赏功能 腾讯404页面 动画（未设置） 第三方服务 评论系统（来必力） 搜索服务（采用Local Search） 数据统计和分析，统计浏览人数和文章阅读次数 进阶内容 设置阅读全文，在文章中使用 手动进行截断， 图床（七牛云） 文章加密访问 鼠标点击小红心 异地同步博客内容 加上宠物，npm install hexo-helper-live2d 遇到的坑leancloud 无法加载leancloud 无法加载，原因是缺少security 这个安全插件，用来修复计数中存在的安全漏洞。 A plugin to fix a serious security bug in leancloud visitor counter for NexT theme site and other site that integrated this function using a similar way. 具体信息请看 GitHub文档https://github.com/theme-next/hexo-leancloud-counter-security 修复此问题见https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md 某些主题设置不会立即生效，请耐心等待几分钟！！！返回顶部按钮在屏幕尺寸小于991px时自动隐藏在移动端发现没有返回顶部按钮，调试时发现在页面宽度小于991px时，存在下列css 代码： media (min-width: 768px) and (max-width: 991px) { .back-to-top { display: none !important; } } @media (max-width: 767px) { .back-to-top { display: none !important; } } 解决办法： 在\themes\next-reloaded\source\css\_common\components中的back-to-top.styl和 back-to-top-sidebar.styl文件中删除 +tablet() { fixbutton() if hexo-config(&apos;sidebar.onmobile&apos;); hide() if not hexo-config(&apos;sidebar.onmobile&apos;); } +mobile() { fixbutton() if hexo-config(&apos;sidebar.onmobile&apos;); hide() if not hexo-config(&apos;sidebar.onmobile&apos;); } 出现这个现象的原因是在 \themes\next-reloaded\source\css\_common\scaffolding\mobile.styl 文件中存在这几行代码 &gt; 768px &amp; &lt; 991px +tablet() { } &lt; 767px +mobile() { } 导致在页面宽度小于991px时返回顶部按钮消失]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用hexo+GitHub 搭建博客]]></title>
    <url>%2F2018%2F08%2F24%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[为什么要搭建自己的博客呢 种一棵树最好的时候是十年前，其次是现在 两个原因 想有一个属于自己的写文章的地方 身为一个程序员这还需要理由吗？ 这篇文章不是教程，只是搭建博客的过程中的一些感受，首先特别感谢吴润的知乎专栏 https://zhuanlan.zhihu.com/p/26625249 以及jmyblog 的博客http://jmyblog.top nMask’s 的博客https://thief.one 我的博客是参考了这两篇文章搭建好的，期间也遇到了很多莫名其妙的bug好在有万能的Google，在此建议想要搭建博客的同学一定要有耐心，出问题是必然的，不要担心，你遇到的坑很多人都遇到过，所以请保持一个平常心。接下来是我总结的搭建过程，比较简洁。 搭建博客步骤 获得个人网站域名（阿里云） GitHub创建个人仓库 安装Git 和 Node.js 安装Hexo 推送网站 绑定域名 个性化设置 具体的搭建过程参考上面的几篇文章，我的建议和遇到的bug是： 域名买一个简单并且便宜的，我在阿里云买了一个.top的，只要5/年。 在安装Hexo这一步，hexo init blog之后的命令都是在blog/blog这个目录下进行的，一定要注意，不能弄错了。 如果你在安装Hexo或者之前的步骤中有报错，建议你重新下载安装。因为这之前的过程全是安装的部分，一旦出错，没有别的原因，一定是你的操作有问题。而且你解决错误的时间一定要比重新安装耗费的时间长。 关于Markdown，建议用文中推荐的markdownPad2，下载后预览功能不能使用的问题需要下载awesomium插件,部分功能要升级到专业版才可以使用。 域名绑定时遇到了问题，只能采取A 记录， 映射到haitang10.github.io 的IP地址。 next主题竟然改地址了，可恶！！！ 新地址为https://github.com/theme-next，git clone https://github.com/theme-next/hexo-theme-next themes / next 个性化参考 next文档http://theme-next.iissnan.com/getting-started.html 友情链接 https://www.jianshu.com/p/0c3663c4f0ef 未完，待续]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>next</tag>
        <tag>hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
